{"id": 25, "name": "Hieroglyphs", "ioi_id": "hieroglyphs", "subtask": "06-full", "subtask_score": 42, "test_names": ["0-02", "0-03", "smallbin-06", "smallbin-08", "smallbin-09", "smallcnt3-01", "smallcnt3-02", "smallbin-01", "smallbin-02", "smallbin-03"], "generation": "```cpp\n#include<bits/stdc++.h>\n#include \"hieroglyphs.h\"\n\nusing namespace std;\n\nusing vi = vector<int>;\nusing vvi = vector<vi>;\nusing ii = pair<int, int>;\n\nconst int ALPHABET_SIZE = 200001;\n\nbool is_subsequence(const vi& a, const vi& b) {\n    int j = 0;\n    for (int x : a) {\n        if (j < (int)b.size() && b[j] == x) {\n            j++;\n        }\n    }\n    return j == (int)b.size();\n}\n\nvi get_candidate(const vi& a, const vi& b) {\n    int n = a.size();\n    int m = b.size();\n\n    vi occ_a(ALPHABET_SIZE, 0);\n    vi occ_b(ALPHABET_SIZE, 0);\n    for (int i=0; i < n; ++i) {\n        occ_a[a[i]]++;\n    }\n    for (int i=0; i < m; ++i) {\n        occ_b[b[i]]++;\n    }\n\n    vi c;\n    queue<int> qa;\n    queue<int> qb;\n\n    for (int i=0; i < n; ++i) {\n        if (occ_a[a[i]] <= occ_b[a[i]]) {\n            qa.push(i);\n        }\n    }\n    for (int i=0; i < m; ++i) {\n        if (occ_a[b[i]] > occ_b[b[i]]) {\n            qb.push(i);\n        }\n    }\n\n    int i_a_curr = 0;\n    int i_b_curr = 0;\n    int i_a_next = 0;\n    int i_b_next = 0;\n    vi occ_a_curr = vi(occ_a);\n    vi occ_a_next = vi(occ_a);\n    vi occ_b_curr = vi(occ_b);\n    vi occ_b_next = vi(occ_b);\n\n    while(!qa.empty() && !qb.empty()) {\n        while(i_a_next < qa.front()) {\n            occ_a_next[a[i_a_next]]--;\n            i_a_next++;\n        }\n        while(i_b_next < qb.front()) {\n            occ_b_next[b[i_b_next]]--;\n            i_b_next++;\n        }\n\n        int x = a[i_a_next];\n        int y = b[i_b_next];\n\n        int occ_x = occ_a_next[x];\n        int occ_y = occ_b_next[y];\n\n        bool a_good = (occ_a_next[y] >= occ_y && occ_b_curr[x] > occ_b_next[x]);\n        bool b_good = (occ_b_next[x] >= occ_x && occ_a_curr[y] > occ_a_next[y]);\n\n        if (a_good && b_good) return {-1};\n        if (!a_good && !b_good) return {-1};\n\n        if(a_good) {\n            c.push_back(x);\n            qa.pop();\n            while(i_a_curr <= i_a_next) {\n                occ_a_curr[a[i_a_curr]]--;\n                i_a_curr++;\n            }\n            while(b[i_b_curr] != x) {\n                occ_b_curr[b[i_b_curr]]--;\n                i_b_curr++;\n            }\n            occ_b_curr[b[i_b_curr]]--;\n            i_b_curr++;\n        }\n        else {\n            c.push_back(y);\n            qb.pop();\n            while(i_b_curr <= i_b_next) {\n                occ_b_curr[b[i_b_curr]]--;\n                i_b_curr++;\n            }\n            while(a[i_a_curr] != y) {\n                occ_a_curr[a[i_a_curr]]--;\n                i_a_curr++;\n            }\n            occ_a_curr[a[i_a_curr]]--;\n            i_a_curr++;\n        }\n    }\n\n    while(!qa.empty()) {\n        c.push_back(a[qa.front()]);\n        qa.pop();\n    }\n    while(!qb.empty()) {\n        c.push_back(b[qb.front()]);\n        qb.pop();\n    }\n\n    return ((is_subsequence(a, c) && is_subsequence(b, c)) ? c : vi({-1}));\n}\n\nvi index_vector(const vi& a, const vi& b) {\n    int n = a.size();\n    int m = b.size();\n    vi v(m);\n    vi prev_occ_b(ALPHABET_SIZE, -1);\n    vvi a_occ(ALPHABET_SIZE);\n    for (int i=0; i < n; ++i) {\n        a_occ[a[i]].push_back(i);\n    }\n    for (int i=0; i < ALPHABET_SIZE; ++i) {\n        a_occ[i].push_back(n);\n    }\n    vector<ii> min_stack;\n    for (int i=0; i < m; ++i) {\n        if (prev_occ_b[b[i]] == -1) {\n            v[i] = a_occ[b[i]][0];\n        }\n        else {\n            int min_val = lower_bound(min_stack.begin(), min_stack.end(), ii(prev_occ_b[b[i]], -1))->second;\n            if (min_val < n) v[i] = *lower_bound(a_occ[b[i]].begin(), a_occ[b[i]].end(), min_val+1);\n            else v[i] = n;\n        }\n        while(!min_stack.empty() && min_stack.back().second >= v[i]) {\n            min_stack.pop_back();\n        }\n        min_stack.emplace_back(i, v[i]);\n        prev_occ_b[b[i]] = i;\n    }\n    return v; \n}\n\nvi reverse_index_vector(vi a, vi b) {\n    int n = a.size();\n    reverse(a.begin(), a.end());\n    reverse(b.begin(), b.end());\n    vi v = index_vector(a, b);\n    reverse(v.begin(), v.end());\n    for (int& x : v) x = n-1-x;\n    return v; \n}\n\nbool verify(const vi& a, const vi& b, const vi& c) {\n    if (c == vi({-1})) return false;\n    if (c == vi()) return true; \n    int n = a.size();\n    int m = b.size();\n    int l = c.size();\n\n    vi occ_a(ALPHABET_SIZE, 0);\n    vi occ_b(ALPHABET_SIZE, 0);\n    for (int i=0; i < n; ++i) {\n        occ_a[a[i]]++;\n    }\n    for (int i=0; i < m; ++i) {\n        occ_b[b[i]]++;\n    }\n\n    vi iva = index_vector(a, c);\n    vi ivb = index_vector(b, c);\n    vi riva = reverse_index_vector(a, c);\n    vi rivb = reverse_index_vector(b, c);\n\n    int cai = 0;\n    int cbi = 0;\n    vector<ii> a_stack;\n    vector<ii> b_stack;\n\n    for (int i=0; i < l; ++i) {\n        if (occ_a[c[i]] <= occ_b[c[i]]) {\n            while (a[cai] != c[i]) cai++;\n\n            while (!a_stack.empty() && a_stack.back().second <= rivb[i]) a_stack.pop_back();\n            a_stack.emplace_back(cai, rivb[i]);\n\n            while (!b_stack.empty() && b_stack.back().second < cai) b_stack.pop_back();\n            if (!b_stack.empty() && b_stack.back().first > ivb[i]) {\n                return false;\n            }\n\n            cai++;\n        }\n        else {\n            while (b[cbi] != c[i]) cbi++;\n\n            while (!b_stack.empty() && b_stack.back().second <= riva[i]) b_stack.pop_back();\n            b_stack.emplace_back(cbi, riva[i]);\n\n            while (!a_stack.empty() && a_stack.back().second < cbi) a_stack.pop_back();\n            if (!a_stack.empty() && a_stack.back().first > iva[i]) {\n                return false;\n            }\n\n            cbi++;\n        }\n    }\n    return true;\n}\n\nvector<int> ucs(vector<int> a, vector<int> b) {\n    vi c = get_candidate(a, b);\n    if (verify(a, b, c)) return c;\n    return {-1};\n}```\n"}
